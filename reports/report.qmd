---
title: "Temporality is Important for Networks of Hospital Patient Transfers"
authors:
    - name: David Wu
    - name: Michael Lydeamore
    - name: Andrew Stewardson
    - name: Tjibbe Donker
    - name: Nic Geard
    - name: "******"
date: last-modified
format:
    html: default
    pdf:
        include-in-header:
            - text: |
                \usepackage{mathtools}
        papersize: a4
bibliography: refs.bib
csl: plos.csl
filters:
    - diagram
jupyter: python3
execute:
    echo: false
    warning: false
    error: false
---

```{python}
import numpy as np
import polars as pl
from matplotlib import pyplot as plt, colors
import seaborn as sns
import h5py
import itertools
import re

from pathlib import Path

# setup printing formats for tables
pl.Config.set_tbl_hide_column_data_types(True)
pl.Config.set_tbl_hide_dataframe_shape(True)

sns.set_theme(style='ticks')
sns.set_palette('colorblind')
sns.set_context('paper')
```

# Key Points

- There is a significant amount of patient movement in the Victorian hospital system where the patient returns home for a substantive amount of time between discharge from one hospital and subsequent admission at another hospital.
- This "indirect" movement has implications on the rate of spread of a hypothetical contagion through the hospital system. It causes dispersal of patients to be slower than expected.
- We can recover some of this behaviour by introducing an additional layer in the network to represent indirect movement.

<!-- # Glossary

| symbol | name | description |
|--------|------|-------------|
| v | vertex | |
| e | edge | |
| i | index of vertex | |
| j | index of other vertex | |
| t | time | |
| x | location | hospital |
| W | bin width | discretisation of the temporal network |
| $\gamma$ | discharge | rate of discharge |
| N | num | size of something |
| k | hitting time | (expected) |
| $\lambda$ | rate | of an event / process |
| T | time period | of the _entire_ simulation |

define a vertex $v_i = (x_i, t_i)$ made up of a location and time resp. -->

# Introduction

Antimicrobial resistance poses a great threat to human health and development. [@murray_global_2022]
Globally, it poses a large burden, operationally and economically, on hospital systems.
In Australia, we see [significant] economic burden from AMR.
this impact could become more significant if we had incursion and subsequent establishment of new [strains] of AMR. One X of interest is carbapenemase-producing enterobacteriacea (CPE). Australia has an endemic strain of CPE -- IMP4 -- but this is at a relatively low level. This already causes some level of burden, and introduced strains would further multiply this.

Understanding of the spread of AMR through hospital systems has been studied in the past as a network phenomenon. The movement of patients through the hospital systems induced by referrals can be represented as edges between hospital nodes. However, these networks are usually presented as static, where movement over a large period of time has been aggregated to form a single network. It is known, especially in other applications, that temporal networks can display different behaviour than the static equivalents. In this paper, we investigate these differences using the Victorian hospital system as a baseline for comparison. In particular, we investigate the impacts of the inclusion of modelling the period of time that patients spend at home between admissions, and the effect of approximating the granularity of the temporality]]]]].


# Methods

## Setting and data sources

Victoria, Australia, has a population of 7.0 million people [@ABS_state_populations]. Its hospital system consists of $N_x = 338$ hospital campuses, which vary in size, case mix and services. 

Hospital admissions data was sourced from the Victorian Admitted Episdoes Dataset (VAED) [@VAED_official].
In particular, admissions data from 1 January 2011 to 9 December 2020 (3631 days) was used in this study. All Victorian hospital admissions during this study period are included. The total number of admission records is 26876787.
This data was aggregated into time-discretised temporal networks (described below), and exported from the database; further analysis as presented in this paper is performed on external machines with no access to identifiable protected health information.

Some exploratory analysis of this data was done in by [@lydeamore_carbapenemase-producing_2024].

## Existing Network Modelling {#sec-network-modelling}

A network or graph $\mathcal{G} = (\mathcal{V}, \mathcal{E})$ is made up of nodes or vertices $\mathcal{V} = \{v_1, v_2, \dots\}$ and edges $\mathcal{E} = \{e_{ij} \coloneqq (v_i, v_j)\}$ that join those nodes. Each edge $e_{ij}$ can be assigned attributes, including an edge weight $w_{ij}$.
For our application, this edge weight will typically represent the number of observed movements in a given time period. Thus the network can encode a representation of the movement between hospitals over a given time period.

We can use the network to construct a Markov chain, where the expected rate of movement is governed by the observed movement in the data. For some edge $e_{ij}$ with a number of observed movements $w_{ij}$ over some time period $\tau$, the rate of movement along that edge $\lambda_{ij} = w_{ij} / \tau$, such that the time between movement events along that edge are exponentially distributed $\text{Exp}(\lambda_{ij})$.

[Stuff about previous implementations of this idea]


## Explicitly Temporal Models
Previous analyses of movement and spread of contagions through these networks have made assumptions that result in the weight $w_{ij}$ of any given edge being constant over time, i.e. the network is static. [.....Typically, this is a result of performing an aggregation, and approximating the patient movement between hospitals as being Poisson, or equivalently that the residence time  hospitals being exponentially distributed......]
As shown in @fig-readmission-window, these approximations lead to misleading dynamics on the hospital system of Victoria: the empirical distribution of inter-transfer times [....]. A naïve static approximation that matches the mean readmission window will be inaccurate; in the following, we will attempt to resolve this problem in three increasingly granular ways:

1. using a simple piecewise exponential approximation, by choosing a single threshold
2. using a series of static networks with ...
3. using a temporal network that exactly captures the readmission window distribution

<!-- One advantage that the VAED provide us is the minute-scale granularity of patient admissions, which allows us to construct temporal networks and models of patient movement. -->


```{python}
#| label: fig-readmission-window
#| fig-cap: Distribution of readmission time (time between discharge and successive admission of a single patient)

# sourced from readmission_time.py
readmit_window = pl.read_parquet("../concordant_networks/readmission_time.parquet")

# naive static distribution
mean_window = (
    readmit_window
    .with_columns((pl.col('readmission_time') * pl.col('count')).alias('weighted_sum'))
    .select(pl.col('weighted_sum').sum() / pl.col('count').sum())
    .item()
)
num_readmits = readmit_window.select(pl.col('count').sum()).item()

xs = np.arange(0, 366, dtype=np.float64)
naive_static_dist = num_readmits / mean_window * np.exp(-xs / mean_window) # scaling to N

# piecewise distribution (improved static)
threshold = 4
shorts = readmit_window.filter(pl.col('readmission_time') <= threshold)
longs = readmit_window.filter(pl.col('readmission_time') > threshold)

short_window = (
    shorts
    .with_columns((pl.col('readmission_time') * pl.col('count')).alias('weighted_sum'))
    .select(pl.col('weighted_sum').sum() / pl.col('count').sum())
    .item()
)
n_shorts = shorts.select(pl.col('count').sum()).item()

long_window = (
    longs
    .with_columns((pl.col('readmission_time') * pl.col('count')).alias('weighted_sum'))
    .select(pl.col('weighted_sum').sum() / pl.col('count').sum())
    .item()
)
n_longs = longs.select(pl.col('count').sum()).item()

sxs = np.arange(0, threshold+1, dtype=np.float64)
short_dist = n_shorts / short_window * np.exp(-sxs / short_window)

lxs = np.arange(threshold, 366, dtype=np.float64)
long_dist = n_longs / long_window * np.exp(-lxs / long_window)

fig, ax = plt.subplots()
ax.scatter(*(readmit_window.to_numpy().T), marker='.', color='k')
h_0 = ax.plot(xs, naive_static_dist, color='C0', label='Naïve Static')
h_1 = ax.plot(sxs, short_dist, color='C1', label='Improved Static')
ax.plot(lxs, long_dist, color='C1')
ax.axvline(threshold, color='C1', linestyle='dashed')
ax.set_xscale('asinh')
ax.set_yscale('log')
ax.set_xlabel('Readmission Window (days)')
ax.set_ylabel('Count')
ax.set_aspect(0.5)
ax.set_xticks([0, 1, 1e1, 1e2])
ax.set_xticks([2, 5, 2e1, 5e1, 2e2, 5e2], minor=True)
ax.set_xlim(-1e-1, 1e3) # !! this is manual
ax.set_ylim(5e3, 1e8) # !! this is manual
ax.legend(handles=[*h_0, *h_1])
sns.despine()
```

{skip}


Patient transfers can be considered as edges from some source hospital $x_i$ at some time $t_i$ to a target hospital $x_j$ at some time $t_j$. 
Because we cannot export exact times, we instead discretise time.
This is done by treating movements involving some arbitrary hospital $x_i$ between times $t_i$ and $t_i + W$ as instead involving a single node at $v_i \coloneqq (x_i, t_i)$. 

<!-- ::: {#fig-}
```{.tikz}
\begin{tikzpicture}
\tikzstyle{every node}=[font=\LARGE]
\draw [short] (2.75,14.75) -- (16.5,14.75);
\draw [short] (2.75,11) -- (16.5,11);
\draw [dashed] (3.5,16.25) -- (3.5,9.25);
\draw [dashed] (8.25,16.5) -- (8.25,9.25);
\draw [dashed] (12.25,16.5) -- (12.25,9.25);
\draw [dashed] (16,16.5) -- (16,9.25);
\draw [->, >=Stealth] (7.25,14.75) -- (9.25,11);
\draw [->, >=Stealth] (8.75,14.75) -- (13.25,11);
\draw [->, >=Stealth] (9.5,11) -- (10.75,14.75);
\draw [->, >=Stealth] (4.25,11) -- (5,14.75);
\draw [->, >=Stealth] (5.5,14.75) -- (5.5,11);
\draw [->, >=Stealth] (6.25,11) -- (7,14.75);
\draw [->, >=Stealth] (10,14.75) .. controls (11.75,15.75) and (12.5,15.75) .. (14.25,14.75) ;
\draw [->, >=Stealth] (15,11) -- (15,14.75);
\end{tikzpicture}
``` -->

<!-- ::: {#fig-time-discretisation}

```{.tikz}
%%| caption="This is an image, created by **TikZ i.e. LaTeX**."
%%| additionalPackages="\usepackage{adjustbox}"
\usetikzlibrary{arrows}

\resizebox{16cm}{!}{%
\begin{tikzpicture}[auto]
    \tikzstyle{every node}=[font=\LARGE]
    \draw [short] (0.275,1.475) -- (1.65,1.475);
    \draw [short] (0.275,1.1) -- (1.65,1.1);
    \draw [dashed] (0.35,1.65) -- (0.35,0.925);
    \draw [dashed] (0.825,1.65) -- (0.825,0.925);
    \draw [dashed] (1.225,1.65) -- (1.225,0.925);
    \draw [dashed] (1.6,1.65) -- (1.6,0.925);
    \draw [O-Latex] (0.725,1.475) -- (0.925,1.1);
    \draw [->, >=Stealth] (0.875,1.475) -- (1.325,1.1);
    \draw [->, >=Stealth] (0.95,1.1) -- (1.075,1.475);
    \draw [->, >=Stealth] (0.425,1.1) -- (0.5,1.475);
    \draw [->, >=Stealth] (0.55,1.475) -- (0.55,1.1);
    \draw [->, >=Stealth] (0.625,1.1) -- (0.7,1.475);
    \draw [->, >=Stealth] (1.0,1.475) .. controls (1.175,1.575) and (1.25,1.575) .. (1.425,1.475) ;
    \draw [->, >=Stealth] (1.5,1.1) -- (1.5,1.475);
\end{tikzpicture}
}
```

Example schematic for time discretisation
::: -->

Then we can have a temporal network that can be treated as a static network as in @sec-network-modelling, i.e. we have edge weights $w_{ij}$ along the edge $e_{ij} \coloneqq (v_i, v_j)$, but with some explicit temporal representation.


The network analysis of the temporal network as described above is computationally expensive since it is relatively large ($N_x = 388$ hospitals and $N_t = 259$ fortnightly bins, for $\approx 10000$ nodes).
We can instead analyse slices of the temporal network, where a slice at $t_n$ consists of nodes at that time discretisation bin, and the related nodes.



## Dynamics


For the temporal network, we can model the number of patients discharged from some given location ($x_i$) at a given time ($t_n$) as a Poisson random variable with rate $\gamma(x_i, t_n)$. Some proportion $q(x_i, \emptyset)$ of these individuals will not re-admit at any other hospital, and can be removed from the system; the remaining discharged patients will have some probability $p(x_i, t_n, x_j, t_m)$ to re-admit at location $x_j$ at time $t_m$. These probabilites $p$ wil depend on the edges...
Patients that have $t_i \neq t_j$ will be moved into an auxiliary state $z_{i,j}$...
Movemnts $z_{ij}$ are distriuted as Uniform(0, W)



<!-- 
We have line-listed patient movement data between {start_date} and {end_date}. This allows us to generate exact patient movement networks up to minute precision.
By arranging patient journeys within this dataset, we can construct a network of patient transfers when two consecutive (but not necessarily temporally adjacent) admissions of the same patient occur at different healthcare facilities.
We can model this data as a temporal network where a (single) patient being discharged from hospital $A$ at time $t_1$ and admitted to hospital $B$ at a later time $t_2$, given the patient is not admitted to any other hospital in the interim, contributes to a weight of 1 on the edge $(A, t_1) \to (B, t_2)$.
To reduce the computational expense of such a network, and to protect patient anonymity, we aggregate these patient transfer events to a discrete set of times. By choosing some window size $W$, we treat events that occur in the time interval $[t_i, t_i+W)$ as all occurring at $t_i$.
This aggregation classifies patient transfers into two classes. 
Transfers can be "direct", where the discharge and subsequent admission both occur within the same time window $[t_i, t_i+W)$. Alternatively they can be "indirect", where the patient is not present in the hospital system for some amount of time between discharge and admission, i.e. when $t_2 \neq t_1$. From inspecting the dataset, we see that there is a significant number of transfers that are indirect, and the time between consecutive admissions is distributed sub-exponentially, with a heavy tail.
These types of transfers imply causal edges between hospitals that are neither synchronous (occur at the same time), nor persistent (where the effect of a cause at time $t_1$ is not felt over some interval $(t_1, t_2)$), which make it challenging to fit a temporal network generated by this dataset into classical temporal network frameworks of representation. -->



<!-- 
We use a discrete time Markov chain model to simulate the spread of infection. Simulations step forward in timesteps of $\delta t$, and events within the window $\delta t$ are assumed to be independent.
For simplicity, we model the infection as SI or SIS, depending on the choice of removal rate; we assume that all facilities are at capacity all the time, which allows us to remove the explciit tracking of susceptibles.
When individuals are removed, they are randomly chosen to either never return or eventually return (to the hospital system); if they do, they are randomly placed into a transfer bucket which has two properties:

- where they will readmit
- when they will readmit

For a "full" temporal simulation, both where and when are specified; for a "reduced" simulation, only "where" is specified, and "when" falls into one of two buckets: immediately, or not immediately.
We use a "full" temporal simulation with the unprojected temporal network, and a "reduced" simulation for any projection of that temporal network that has lost temporal information.

<Specification of the model here>

| Parameter | Description |
|-----------|---------------------------------------|
| $\beta$   | Rate of infection per unit infected per day |
| $\eta$    | Rate of removal/recovery |
| $\gamma$  | Rate of discharge from hospital |
| $M$       | Transition matrix inferred from network | -->


### A Reduced Model

For the naïve and improved static network models, we can compute the hitting times directly and compare them.
We can model the dyanmics on these networks as a (continuous time) Markov Chain and extract the mean hitting time to any target hospital from all other hospitals. 

A simplistic model of the effect of indirect transfer can be modelled with the following figures:

:::{#fig-model-going-home layout-ncol="2"}

```{dot}
//| fig-width: 30%
digraph G {
    A -> B [ label="λ₀" ]
}
```

```{dot}
//| fig-width: 50%
digraph G {
    A -> B [ label="λ†p" ]
    A -> H [ label="λ†(1-p)" ]
    H -> B [ label="λₕ" ]
}
```

Toy model of the effect of indirect transfer on hitting time
:::


Let us denote the (empirical) distribution of return times as $f(T)$, where $T$ is the return time.
Then for a naive model, we have that the hazard of moving between two hospitals is approximately
$\lambda_0 = (\mathbb{E}(A \to B))^{-1} = (\int_0^{\infty} f(T) T dT)^{-1}$

For the refined model, we have instead two processes

$A \to B$ and $A \to H \to B$,

where 

$\mathbb{E}(T_{A\to B}) = \int_0^{\Omega} f(T) T dT$

and 

$\mathbb{E}(T_{A\to H\to B}) = \int_\Omega^{\infty} f(T) T dT$

We could simulate with some rate $\lambda_\dagger$ so that 

$\lambda_d = \mathbb{E}(T_{A\to B})^{-1} = \lambda_\dagger \times p$

and 

$\lambda_x = \lambda_\dagger \times (1-p)$ (indirect)

AND

$p = \int_0^{\Omega} f(T) dT$ is the proportion of individuals that take the direct path.

Thus we can recover that $\lambda_\dagger = \left(\int_0^{\Omega} f(T) T dT\right)^{-1} \int_0^{\infty} f(T) dT$.

And if we require that

$(\lambda_x)^{-1} + (\lambda_h)^{-1} = \int_\Omega^{\infty} f(T) T dT$

and so

$$
\begin{aligned}
(\lambda_h)^{-1} &= \left[\int_\Omega^{\infty} f(T) T dT \right] - (\lambda_\dagger (1-p))^{-1}\\
&= \left[\int_\Omega^{\infty} f(T) T dT \right] - \left[\left[\int_0^{\Omega} f(T) T dT \right]^{-1} {\int_\Omega^{\infty} f(T) dT} \right]^{-1}\\
&= \left[\int_\Omega^{\infty} f(T) T dT \right] - \left[\int_0^{\Omega} f(T) T dT \frac{1}{\int_\Omega^\infty f(T) dT}\right]
\end{aligned}
$$

We also need that $(\lambda_\dagger (1-p))^{-1} < \int_\Omega^{\infty} f(T) T dT$ (is this always possible?)

If $T \sim Exp(\lambda)$, then $f(T) = \lambda \exp(-\lambda T)$ and $F(T) = 1 - \exp(-\lambda T)$.
We can also find that $\int_a^b f(T) T dT = \left[ -(T + \lambda^{-1}) \exp(-\lambda T) \right]^b_a$, so that 

$\int_0^\Omega f(T) T dT = -(\Omega + \lambda^{-1}) \exp(-\lambda \Omega) + (0 + \lambda^{-1}) \exp(-\lambda 0) = \lambda^{-1} (1- \exp(-\lambda \Omega)) - \Omega \exp(-\lambda \Omega)$

and

$\int_\Omega^\infty f(T) T dT = (\Omega \lambda^{-1}) \exp(-\lambda \Omega)$

so that 

$(\lambda_\dagger (1-p))^{-1} = [\lambda^{-1} (1- \exp(-\lambda \Omega)) - \Omega \exp(-\lambda \Omega)]  \frac{1}{\exp(-\lambda \Omega)}$

We can then say that 
:::


<!-- In the model without indirect transfer, we can compute the expected hitting time $k_{1}$ from $S_0$ to $S_1$ as

$$k_{1} = {\lambda_0}^{-1}$$

In a model with indirect transfer, we introduce an additional state $S_2$ which represents the indirect pathway. If the probability of direct transfer is $p$ given that an individual will move out of $S_0$, and the average indirect transfer period is $T = \lambda_2^{-1}$, the we can compute the hitting time $k_{1^*}$ of $S_1$ given we start at $S_0$:

$$k_{1^*} = {\lambda_0}^{-1} + \frac{1-p}{\lambda_2}$$

i.e. the hitting time is increased by $\frac{1-p}{\lambda_2}$. -->

For a larger network, the number of possible paths causes complications for explicit computation of the effect, but we can always expect it to follow a similar principle, where splitting transfers into a direct path and a slower indirect path will add to the expected hitting time. These can be obtained by solving a linear system [@Norris_Markov_Chains_1997].


![An example of a small 2-layer static network](diagrams/precompiled/BiLayer_ManimCE_v0.18.1.png){#fig-bilayer}


# Results

## Temporal Network Analysis




## Effect of Home-return Mechanic

For the naïve static network, we can model the rate of movement from hospital $i$ to hospital $j$ as the mean number of observed movements over the observation period (XXX days).
For the improved static network, we expand the state by including an additional state for each pair of hospitals, so that the residence time at home (between hospital admissions) for indirect transfers can be modelled. Then as with the naïve model, the movement from $i$ to $j$ directly is the mean observed number of transfers over the observation epriod. The indirect movements from $i$ to the intermediate $i,j$ state are derived from the observed number of movements, and the rate from $i,j$ to $j$ is derived from the mean readmission period (as seed in @fig-readmission-window).

Comparing the (uniform) relative difference in the mean hitting times ($= k_{1^*} / (k_1 + 1)$) gives us @fig-hitting-time-difference. We see that there is significant banding in the structure of the matrix.

```{python}
#| label: fig-hitting-time-difference
#| fig-cap: Relative difference between the expected hitting times for the naïve static and improved static models

with h5py.File('../hitting_time_analysis/hitting_time_arrays.h5', 'r') as fp:
    naive_static_times = fp['naive_static'][:]
    delayed_static_times = fp['delayed_static'][:]

relative_change = delayed_static_times / (naive_static_times + 1)
plt.matshow(relative_change, cmap='viridis', fignum=99)
plt.colorbar(label='Relative difference in hitting time')
plt.xlabel('Hospital to hit')
plt.ylabel('Starting hospital');
```


## Movement Simulation Studies

<!-- 
To isolate the effect of the projections on the movement of patients, we can simulate the model with parmeters $\beta = 0, \eta=0$. -->

```{python}
# simulation archives from run_zero*.py
simulation_archives = {
    'temporal': '../zero_sims/temporal/sim_all_30s.h5',
    'static': '../zero_sims/static/sim_all_30s_fixed_axis.h5',
    'snapshot': '../zero_sims/snapshot/sims_with_30seeds_pseudocap_fixed_axis.h5',
    'naive_static': '../zero_sims/naive_static/sim_all_30s.h5',
}

metrics_archives = {
    'temporal': '../zero_sims/temporal/metrics_30s.parquet',
    'static': '../zero_sims/static/metrics_30s_fa.parquet',
    'snapshot': '../zero_sims/snapshot/metrics_30s_fa.parquet',
    'naive_static': '../zero_sims/naive_static/metrics_30s.parquet'
}

processed_results = {}

# metrics precomputed in compute_summary_stats.ipynb
for label, archive in metrics_archives.items():
        processed_results[label] = pl.read_parquet(archive)
```


We define the _extent_ of a simulation by the number of facilities that some patient has moved to or through within a given number of days. We see in @fig-extent-30 that we get starkly different distributions of extent for the naïve static model, compared to the other models.

```{python}
#| label: fig-extent-30
#| fig-cap: "Distribution of 30-day extent in different simulation models on different network types"

combined_all_df = pl.concat(
    [(df.select('seed', 'extent')
        .with_columns(
            pl.lit(label).alias('simulation'), 
            pl.col('extent').cast(pl.Int64)
        )
     ) for label, df in processed_results.items()
    ]
)

sim_type_order = ['temporal', 'snapshot', 'static', 'naive_static']
extent_bins = np.arange(0, combined_all_df.select('extent').max().item()+1)

sns.histplot(
    combined_all_df, 
    x = 'extent', 
    hue = 'simulation', 
    multiple = 'dodge', 
    bins = extent_bins, 
    hue_order = sim_type_order,
    discrete = True,
)
sns.despine()
```

```{python}
# comparisons from compute_summary_stats.ipynb
comparative_results = dict()
name_pattern = re.compile(r"(\w+)_x_([\w_]+)\.30s")
for comp_file in Path("../zero_sims/comparisons/").glob("*.30s.parquet"):
    pair = name_pattern.match(comp_file.stem).groups()
    if pair is None:
        raise RuntimeError(f"Unable to parse file name: {comp_file.name}")
    paired_comparison = pl.read_parquet(comp_file)
    comparative_results[pair] = paired_comparison
    comparative_results[tuple(reversed(pair))] = paired_comparison.with_columns(-pl.col('statistic'))
```

We can frame the empirical cumulative distribution (ECDF) of hitting times from a given seed hospital to a target hospital in a survival analysis view, and compare different experimental setups by comparing the ECDFs of the combinations of hitting times with log-rank tests. Each pair of hospitals yields a separate log-rank test statistic.
Using a crude Bonferroni correction to counteract the multiple comparisons (which occur due to the ${N_x}^2=338^2$ combinations of seed and target hospitals), we find that there are significant differences between each type of model. We note spikes at very low p-values when comparing the naïve static model to other models.


```{python}
#| label: fig-logrank-comparison
#| fig-cap: Log-rank test comparisons between experiments
#| cache: true

comparable_pairs = map(lambda x: sorted(x, key=sim_type_order.index), 
                       itertools.combinations(sim_type_order, 2))

NN = len(sim_type_order) - 1

fig, axs = plt.subplots(
    nrows=NN, ncols=NN, 
    squeeze=True, 
    sharex=True, sharey=True, 
    layout="constrained"
)

confidence_threshold = 0.01 / (338**2)

for pair in comparable_pairs:
    index = (sim_type_order.index(pair[1]) - 1, sim_type_order.index(pair[0]))
    comparison = comparative_results[tuple(pair)]

    sns.histplot(comparison, x='pvalue', log_scale=True, ax=axs[index], kde=True)

    axs[index].axvline(confidence_threshold, color='r')
    axs[index].set_yscale('asinh')
    sns.despine(ax=axs[index])

for label, ax in zip(sim_type_order[1:], axs[:,0]):
    ax.set_ylabel(label)

for label, ax in zip(sim_type_order, axs[-1,:]):
    ax.set_xlabel(label)

fig.supxlabel('pvalue')
fig.supylabel('Count')

for index in zip(*np.triu_indices_from(axs, k=1)):
    fig.delaxes(axs[index])
```

# Discussion

The modelling of patient transfers between hospitals has historically been done by using static networks.



{{< pagebreak >}}
# Appendix

## Projecting the temporal network
We can project these causal edges by making their effects persistent in a hospital. This reduces the amount of information stored, so in theory should improve performance of simulations.

With a naive approach, an edge $(A, t_1) \to (B, t_2)$ can be decomposed into:

1. $(A, t_1) \to (B, t_1)$ and $(B, t_1) \to \dots \to (B, t_2)$
2. $(A, t_1) \to \dots \to (A, t_2)$ and $(A, t_2) \to (B, t_2)$

This causes an implied increased infection pressure at certain hospital nodes. This sort of projection also loses specificity of temporal causality. By inspecting the temporal network that results from this projection, you cannot tell if a patient is moving from $t_1$ to $t_2$ or to $t_3$. 

There is also a mechanistically distinct projection, where we introduce "home" nodes for each facility. For some facility $A$, the home node is denoted $A'$.
Thus we could also project the edge as 

- $(A, t_1) \to (A', t_1)$ and $(A', t_1) \to \dots \to (A', t_2)$ and $(A', t_2) \to (B, t_2)$.

This is an ideal projection, but is difficult to achieve. Specifically, it is difficult to control the duration that an individual spends in the home node.
However, this projection still loses temporal causal specificty, as above.

We project the temporal network into a series of multilayer networks. Instantaneous movements (consisting of direct hospital-hospital transfers) make up one layer; movements from hospital to home make up another layer; and movements from home to hospital make up the third layer.
By doing this, we can more accurately capture the time that a patient spends at home between hospital visits, but without explicitly tracking individuals (just the number of patients along each path).



<!-- ## Estimation of parameters for the projected network simulations

The rate / transition matrix that defines the rate of return from home to hospital is characterised by the matrix $M_{in}$, such that

$$M_{in}(i, j, t) = \frac{n_r(i, j, t)}{n_h(i, j, t)},$$

where $i$ is the index for the hospital an individual was at prior to going home, $j$ the index for the hospital an individual is going to from home, $t$ the current time, $n_r$ the number of individuals that are returning from home, and $n_h$ the number of individuals that are currently at home (and will return to a hospital at some point in the future).

We observe $n_r$ in the data, but we do not have any direct observations of $n_h$. We could compute this by iterating through the data, counting the number of individuals going home and returning to hospital, but this is expensive, and not necessarily available in all cases. Instead, we utilise the available values of $n_g$, the number of individuals that go home from hospital. We have a estimated return time distribution for individuals characterised by the pdf $r(\tau)$, so we apply this by estimating $n_h$ as

$$n_h(i, j, t) \approx \int_{t-T}^t n_g(i, j, \tau) r(t - \tau) d\tau.$$

We truncate this approximation at some bandwith time $T$.

The retrun time distribution is presented in @figure-??. We fit a power law model $r(\tau) \sim \tau ^k$ with coefficient $k \approx -0.6$. -->

## Simulation Details and Model

We keep records of two sets of states:

1. $n(t, x)$, the current number of infected at location $x$. This represents individuals in hospital.
2. $u(t, x, y)$, the current number of individuals that came from location $x$ and will depart for location $y$ at some point in the future. This represents the number of people at home.

Each snapshot can be considered a graph composed of vertices $V$ that correspond to locations, and have edges $E$.

Edges of the temporal network, $e(x, s, y, t)$ from location $x$ at time $s$ to location $y$ at time $t$ with some weight $w$ can be decomposed:

1. if $s = t$, construct an edge $e(x, y)$ with weight $w$
2. if $s \neq t$ construct two edges:
   1. $e_o(x, y, s)$ if it doesn't exist, and add weight $w$
   2. $e_i(x, y, t)$ if it doesn't exist, and add weight $w$


We can alternatively conceptualise this as decomposing the temporal edges into movements to a "home" node for each pair of hospitals. The edges $e_o(x, y, s)$ can be conceptualised as an edge between $x$ and a new "home" node denoted by the ordered pair $(x, y)$ at time $s$.

<!-- ```{python}
#| echo: false

# we're going to use networkx and its layout engine to draw the diagram cause the other engines are dogwater
import networkx as nx
from matplotlib import pyplot as plt

fig = plt.figure()
grid = fig.add_gridspec(2, 1, hspace=0)
ax1, ax2 = grid.subplots(sharex=True, squeeze=True)
for ax in (ax1, ax2):
    ax.set_box_aspect(1)

ABC = nx.DiGraph(['AB', 'BC', 'BA', 'CB', 'AC', 'CA'])
nx.draw_networkx(ABC, ax=ax1, with_labels=True)

``` -->


## Searching snapshots for information on unlikely paths

We observed some empirical simulated hitting time survival curves that suggested that paths that did exist and were likely on the temporal network did not exist or were very unlikely on the equivalent snapshots. This seems confusing, since the snapshot representation _should_ represent a superset of possible movements.

## Approximations made with the Static Network

A standard static network consists of a single layer of nodes and edges.
In order to capture patients leaving and then subsequently returning to hospital, we model the network with two layers: a "standard" layer represeting 'direct' transfers, and a secondary layer representing indirect transfers. This secondary layer is bipartite in nature, where each (potential) edge in the primary layer is represented by replacing it with a "home" node, and adding two additional edges to it: one from the original source node to the home node, and another from the home node to the original target node.
This is implicitly captured in the network data structure by setting two additional edge attributes that represent the amount of flow on each of the two new secondary layer edges respectively.

We remove self-loops from the static network; we attempt one model without self-loops in only the direct layer (since this does not make physical sense), and another without self-loops in both the direct layer, and the indirect layer (we uspected that these self-loops slowed the movement of individuals down, but the resulting effect is the explosion of movement in the first simulation step)

## Snapshots

Network analysis of the explicitly-temporal network is difficult, since the number of nodes is relatively large ($N \sim N_x \times N_t$), and inversely scales with the temporal discretisation chosen ($N_t \sim 1/W$).

We can instead look at the series of static network induced by projection onto the locations at each time point. This allows 