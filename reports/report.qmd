---
title: "Temporality is Important for Networks of Hospital Patient Transfers"
authors:
    - name: David Wu
    - name: Michael Lydeamore
    - name: Andrew Stewardson
    - name: Tjibbe Donker
    - name: Nic Geard
    - name: "******"
date: last-modified
format:
    html: default
    pdf: default
bibliography: refs.bib
csl: plos.csl
---

# Key Points

- There is a significant amount of patient movement in the Victorian hospital system where the patient returns home for a substative amount of time between discharge from one hospital and subsequent admission at another hospital.
- This "indirect" movement has implications on the rate of spread of a hypothetical contagion through the hospital system. It causes dispersal of patients to be slower than expected.
- We can recover some of this behaviour by introducing an additional layer in the network to represent indirect movement.


# Introduction

Antimicrobial resistance poses a great threat to human health and development. [@murray_global_2022]
Globally, it poses a large burden, operationally and economically, on hospital systems.




Antimicrobial resistance is bad. In Victoria, Australia, we have observed CPE, and want to understand how the underlying movement of patients could affect the spread of CPE and other related AMR in the future.
The focus of this paper is on the patient movement network: ways of representing, simplifying, and approximating those patient movements; and how those representations of patient movement affect the spread of a hypothetical infection between hospitals in the Victorian healthcare system.

# Network modelling of hospital patient movement



## Generating the temporal network 
We have line-listed patient movement data between {start_date} and {end_date}. This allows us to generate exact patient movement networks up to minute precision.
By arranging patient journeys within this dataset, we can construct a network of patient transfers when two consecutive (but not necessarily temporally adjacent) admissions of the same patient occur at different healthcare facilities.
We can model this data as a temporal network where a (single) patient being discharged from hospital $A$ at time $t_1$ and admitted to hospital $B$ at a later time $t_2$, given the patient is not admitted to any other hospital in the interim, contributes to a weight of 1 on the edge $(A, t_1) \to (B, t_2)$.
To reduce the computational expense of such a network, and to protect patient anonymity, we aggregate these patient transfer events to a discrete set of times. By choosing some window size $W$, we treat events that occur in the time interval $[t_i, t_i+W)$ as all occuring at $t_i$.
This aggregation classfies patient transfers into two classes. 
Transfers can be "direct", where the discharge and subsequent admission both occur within the same time window $[t_i, t_i+W)$. Alternatively they can be "indirect", where the patient is not present in the hospital system for some amount of time between discharge and admission, i.e. when $t_2 \neq t_1$. From inspecting the dataset, we see that there is a significant number of transfers that are indirect, and the time between consecutive admissions is distributed sub-exponentially, with a heavy tail.
These types of transfers imply causal edges between hospitals that are neither synchronous (occur at the same time), nor persistent (where the effect of a cause at time $t_1$ is not felt over some interval $(t_1, t_2)$), which make it challenging to fit a temporal network generated by this dataset into classical temporal network frameworks of representation.



## Simulating on Networks

We use a discrete time Markov chain model to simulate the spread of infection. Simulations step forward in timesteps of $\delta t$, and events within the window $\delta t$ are assumed to be independent.
For simplicity, we model the infection as SI or SIS, depending on the choice of removal rate; we assume that all facilities are at capacity all the time, which allows us to remove the explciit tracking of susceptibles.
When individuals are removed, they are randomly chosen to either never return or eventually return (to the hospital system); if they do, they are randomly placed into a transfer bucket which has two properties:

- where they will readmit
- when they will readmit

For a "full" temporal simulation, both where and when are specified; for a "reduced" simulation, only "where" is specified, and "when" falls into one of two buckets: immediately, or not immediately.
We use a "full" temporal simulation with the unprojected temporal network, and a "reduced" simulation for any projection of that temporal network that has lost temporal information.

<Specification of the model here>

| Parameter | Description |
|-----------|---------------------------------------|
| $\beta$   | Rate of infection per unit infected per day |
| $\eta$    | Rate of removal/recovery |
| $\gamma$  | Rate of discharge from hospital |
| $M$       | Transition matrix inferred from network |

# Results

We run a range of experiments.

## Leading results


## No infection simulations 

To isolate the effect of the projections on the movement of patients, we can simulate the model with parmeters $\beta = 0, \eta=0$.


# Appendix

## Projecting the temporal network
We can project these causal edges by making their effects persistent in a hospital. This reduces the amount of information stored, so in theory should improve performance of simulations.

With a naive approach, an edge $(A, t_1) \to (B, t_2)$ can be decomposed into:

1. $(A, t_1) \to (B, t_1)$ and $(B, t_1) \to \dots \to (B, t_2)$
2. $(A, t_1) \to \dots \to (A, t_2)$ and $(A, t_2) \to (B, t_2)$

This causes an implied increased infection pressure at certain hospital nodes. This sort of projection also loses specificity of temporal causality. By inspecting the temporal network that results from this projection, you cannot tell if a patient is moving from $t_1$ to $t_2$ or to $t_3$. 

There is also a mechanistically distinct projection, where we introduce "home" nodes for each facility. For some facility $A$, the home node is denoted $A'$.
Thus we could also project the edge as 

- $(A, t_1) \to (A', t_1)$ and $(A', t_1) \to \dots \to (A', t_2)$ and $(A', t_2) \to (B, t_2)$.

This is an ideal projection, but is difficult to achieve. Specifically, it is difficult to control the duration that an individual spends in the home node.
However, this projection still loses temporal causal specificty, as above.

We project the temporal network into a series of multilayer networks. Instantaneous movements (consisting of direct hospital-hospital transfers) make up one layer; movements from hospital to home make up another layer; and movements from home to hospital make up the third layer.
By doing this, we can more accurately capture the time that a patient spends at home between hospital visits, but without explicitly tracking individuals (just the number of patients along each path).



<!-- ## Estimation of parameters for the projected network simulations

The rate / transition matrix that defines the rate of return from home to hospital is characterised by the matrix $M_{in}$, such that

$$M_{in}(i, j, t) = \frac{n_r(i, j, t)}{n_h(i, j, t)},$$

where $i$ is the index for the hospital an individual was at prior to going home, $j$ the index for the hospital an individual is going to from home, $t$ the current time, $n_r$ the number of individuals that are returning from home, and $n_h$ the number of individuals that are currently at home (and will return to a hospital at some point in the future).

We observe $n_r$ in the data, but we do not have any direct observations of $n_h$. We could compute this by iterating through the data, counting the number of individuals going home and returning to hospital, but this is expensive, and not necessarily available in all cases. Instead, we utilise the available values of $n_g$, the number of individuals that go home from hospital. We have a estimated return time distribution for individuals characterised by the pdf $r(\tau)$, so we apply this by estimating $n_h$ as

$$n_h(i, j, t) \approx \int_{t-T}^t n_g(i, j, \tau) r(t - \tau) d\tau.$$

We truncate this approximation at some bandwith time $T$.

The retrun time distribution is presented in @figure-??. We fit a power law model $r(\tau) \sim \tau ^k$ with coefficient $k \approx -0.6$. -->

## Simulation Details and Model

We keep records of two sets of states:

1. $n(t, x)$, the current number of infected at location $x$. This represents individuals in hospital.
2. $u(t, x, y)$, the current number of individuals that came from location $x$ and will depart for location $y$ at some point in the future. This represents the number of people at home.

Each snapshot can be considered a graph composed of vertices $V$ that correspond to locations, and have edges $E$.

Edges of the temporal network, $e(x, s, y, t)$ from location $x$ at time $s$ to location $y$ at time $t$ with some weight $w$ can be decomposed:

1. if $s = t$, construct an edge $e(x, y)$ with weight $w$
2. if $s \neq t$ construct two edges:
   1. $e_o(x, y, s)$ if it doesn't exist, and add weight $w$
   2. $e_i(x, y, t)$ if it doesn't exist, and add weight $w$


We can alternatively conceptualise this as decomposing the temporal edges into movements to a "home" node for each pair of hospitals. The edges $e_o(x, y, s)$ can be conceptualised as an edge between $x$ and a new "home" node denoted by the ordered pair $(x, y)$ at time $s$.

<!-- ```{python}
#| echo: false

# we're going to use networkx and its layout engine to draw the diagram cause the other engines are dogwater
import networkx as nx
from matplotlib import pyplot as plt

fig = plt.figure()
grid = fig.add_gridspec(2, 1, hspace=0)
ax1, ax2 = grid.subplots(sharex=True, squeeze=True)
for ax in (ax1, ax2):
    ax.set_box_aspect(1)

ABC = nx.DiGraph(['AB', 'BC', 'BA', 'CB', 'AC', 'CA'])
nx.draw_networkx(ABC, ax=ax1, with_labels=True)

``` -->


## Searching snapshots for information on unlikely paths

We observed some empirical simulated hitting time survival curves that suggested that paths that did exist and were likely on the temporal network did not exist or were very unlikely on the equivalent snapshots. This seems confusing, since the snapshot representation _should_ represent a superset of possible movements.

## Approximations made with the Static Network

A standard static network consists of a single layer of nodes and edges.
In order to capture patients leaving and then subsequently returning to hospital, we model the network with two layers: a "standard" layer represeting 'direct' transfers, and a secondary layer representing indirect transfers. This secondary layer is bipartite in nature, where each (potential) edge in the primary layer is represented by replacing it with a "home" node, and adding two additional edges to it: one from the original source node to the home node, and another from the home node to the original target node.
This is implicitly captured in the network data structure by setting two additional edge attributes that represent the amount of flow on each of the two new secondary layer edges respectively.

We remove self-loops from the static network; we attempt one model without self-loops in only the direct layer (since this does not make physical sense), and another without self-loops in both the direct layer, and the indirect layer (we uspected that these self-loops slowed the movement of individuals down, but the resulting effect is the explosion of movement in the first simulation step)

## Quantifying the effect of including indirect transfers

A simplistic model of the effect of indirect transfer can be modelled with the following figures:

<!-- I don't know why, but the first invocation of the dot engine craps out -->
```{dot}
```


:::{#fig-model-going-home layout-ncol="2"}

```{dot}
//| fig-width: 50%
digraph G {
    S₀ -> S₁ [ label="λ₀" ]
}
```

```{dot}
//| fig-width: 50%
digraph G {
    S₀ -> S₁ [ label="λ₀p" ]
    S₀ -> S₂ [ label="λ₀(1-p)" ]
    S₂ -> S₁ [ label="λ₂" ]
}
```

Toy model of the effect of indirect transfer on hitting time
:::

In the model without indirect transfer, we can compute the expected hitting time $k$ from $S_0$ to $S_1$

$$k = {\lambda_0}^{-1}$$

In a model with indirect transfer, we introduce an additional state $S_2$ which represents the indirect pathway. If the probability of direct transfer is $p$ given that an individual will move out of $S_0$, and the average indirect transfer period is $T = \lambda_2^{-1}$, the we can compute the hitting time $k$ of $S_1$ given we start at $S_0$:

$$k = {\lambda_0}^{-1} + \frac{1-p}{\lambda_2}$$

i.e. the hitting time is increased by $\frac{1-p}{\lambda_2}$.

For a larger network, the number of possible paths causes complications for explicit computation of the effect, but we can always expect it to follow a similar principle, where splitting transfers into a direct path and a slower indirect path will add to the expected hitting time.